def ensure_keychain()
  delete_keychain(
    name: ENV["KEYCHAIN_NAME"]
  ) if File.exist? File.expand_path("~/Library/Keychains/#{ENV["KEYCHAIN_NAME"]}-db")
  create_keychain(
    name: ENV["KEYCHAIN_NAME"],
    password: ENV["KEYCHAIN_PASSWORD"],
    unlock: true,
    timeout: 0,
  )
end

lane :ios_test do
  puts("Testing Fastlane from iOS")
end

lane :ios_flutter do |options|
  build_number = options[:build_number]
  build_name = options[:build_name]
  skip_clean = options[:skip_clean]
  skip_cocoapods = options[:skip_cocoapods]

  unless skip_clean
    sh("flutter", "clean")
    sh("flutter", "packages", "get")
  end

  unless skip_cocoapods
    cocoapods(use_bundle_exec: false, podfile: "ios")
  end

  sh("flutter", "build", "ios", "--release", "--no-codesign", "--no-tree-shake-icons", "--build-name=#{build_name}", "--build-number=#{build_number}")
end

lane :ios_build_and_upload do |options|
  build_number = options[:build_number]
  build_name = options[:build_name]
  skip_clean = options[:skip_clean]
  type = options[:type]
  changelog = options[:changelog]
  skip_cocoapods = options[:skip_cocoapods]
  is_ci = options[:is_ci]
  skip_match = false

  if build_number || build_name
    ios_flutter(build_number: build_number, build_name: build_name, skip_clean: skip_clean, skip_cocoapods: skip_cocoapods)
  end

  if options[:skip_match]
    skip_match = options[:skip_match]
  end

  unless skip_match
    ensure_keychain()
    unlock_keychain(
      path: ENV["KEYCHAIN_NAME"],
      password: ENV["KEYCHAIN_PASSWORD"],
      set_default: is_ci
    )
    
    match(
      app_identifier: [ENV["APP_IDENTIFIER_IOS"], ENV["APP_IDENTIFIER_IOS"] + ".MiUtemNotificationServiceExtension"],
      type: "appstore",
      git_url: ENV["MATCH_REPO_GIT_URL"],
      readonly: is_ci,
      keychain_name: ENV["KEYCHAIN_NAME"],
      keychain_password: ENV["KEYCHAIN_PASSWORD"],
    )
    
  end
  
  build_app(
    workspace: "./ios/Runner.xcworkspace",
    scheme: "Runner",
  )

  if type == "beta"
    ios_beta_upload(options)
  elsif type == "release"
    ios_beta_upload(options)
  end
  
end

lane :ios_beta_upload do |options|
  changelog = options[:changelog]
  is_ci = options[:is_ci]

  upload_to_testflight(
    changelog: changelog,
    skip_waiting_for_build_processing: is_ci
  )
end

lane :ios_release_upload do |options|
  changelog = options[:changelog]

  upload_to_app_store(
    release_notes: changelog
  )
end
